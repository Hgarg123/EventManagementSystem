# Generated by Django 3.1.7 on 2021-04-17 11:24

import app.managers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('mobile_no', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_admin', models.BooleanField(default=False, verbose_name='admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', app.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.IntegerField(unique=True)),
                ('event_name', models.CharField(max_length=500)),
                ('image', models.ImageField(upload_to='cafe/static/EventImages/')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('image', models.ImageField(upload_to='cafe/static/VenueImages/')),
                ('location', models.CharField(max_length=1000)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=4)),
                ('guests', models.IntegerField()),
                ('wifi_available', models.BooleanField(default=False)),
                ('t4seven_available', models.BooleanField(default=False)),
                ('lightning_available', models.BooleanField(default=False)),
                ('catering_available', models.BooleanField(default=False)),
                ('dj_available', models.BooleanField(default=False)),
                ('normal_plate_rate', models.IntegerField(default=0)),
                ('deluxe_plate_rate', models.IntegerField(default=0)),
                ('royal_plate_rate', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.event')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_type', models.CharField(max_length=500)),
                ('dinner_type', models.CharField(max_length=500)),
                ('guest_count', models.IntegerField(default=100)),
                ('total_cost', models.IntegerField(default=0)),
                ('date', models.CharField(max_length=100)),
                ('status', models.CharField(default='Pending', max_length=500)),
                ('isPending', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.venue')),
            ],
        ),
    ]
